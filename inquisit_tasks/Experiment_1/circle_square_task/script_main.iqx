//// Code outline
// Data recording:
// 	  Define what data to record
// Config:
//	  Define user-configured parameters, defaults, and expressions
// Stimuli:
//    practice: 12 target-present, 4 target-absent
//	  main: 32 target-present, 8  target-absent
// Instructions and prompts:
//	  General instructions
//	  response-specific instructions ("/")
//	  response-specific instructions ("z")
// Trials (Define trial types: what stim are presented? Which responses are valid/correct?)
//	  instructions (keys for next, previous)
//    practice target-present ("/")
//	  practice target-absent ("/")
//	  main target-present ("/")
//    main target-absent ("/")
//    practice target-present ("z")
//	  practice target-absent ("z")
//	  main target-present ("z")
//    main target-absent ("z")
// Blocks:
//	  General instructions
//	  response-specific instructions ("/")
//    practice block ("/") (12 t-p, 4 t-a)
//	  main block ("/") (32 t-p, 8 t-a, times 2) 
//	  response-specific instructions ("z")
//    practice block ("z") (12 t-p, 4 t-a)
//	  main block ("z") (32 t-p, 8 t-a, times 2)
// Experiment loop. Define order of blocks

**************************************************************************************************************
	Data recording
**************************************************************************************************************
<monkey>
/ latencydistribution = constant(250)
/ percentcorrect = 95
</monkey>

<data>
/ columns = (build, computer.platform, date, time, values.timestamp, values.time_elapsed_ms, 
subject, group, session, blockcode, blocknum, 
trialcode, trialnum, values.stimulus_left, values.stimulus_right, values.stim_index,
values.target_present, response, correct, latency)
</data>


**************************************************************************************************************
	Config: parameters, defaults, expressions
**************************************************************************************************************

// User-specified variables // TODO: move to config
<parameters>
/ background_color = white
/ foreground_color = black
/ fontfamily_default = "Avenir Next"
/ fontsize_default = 5% // Change to 14pt?
/ fontsize_default_small = 3%
/ nav_button_fontsize_default = 3% // Change to 14pt?
/ fontsize_fixation = 8% // Change to make smaller (e.g., 5%) if using visual fixation cue
/ fontsize_survey = 2% // Change to make smaller (e.g., 5%) if using visual fixation cue
/ fontsize_survey_caption = 3% // Change to make smaller (e.g., 5%) if using visual fixation cue
/ iti = 0 // Time between response and next fixation, or time after timeout with nonresponse
/ fixation_duration = 600
/ shape_duration = 134 // Experiment setting: 134
/ blank_duration = 256
/ mask_duration = 134 // Experiment setting: 134. Set to 2000ms for testing
/ time_limit = 2000 // Maximum response time, after stimulus onset
/ feedback_duration = 1000
/ interblock_break_duration = 20000 // Experiment setting: 20000. Set to 1000ms for testing
/ stim_size = 11.12% // Stimulus width, in % screen size
/ stim_xposition_left = 44%
/ stim_xposition_right = 56%
/ stim_yposition = 50%
</parameters>

<defaults>
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default)
/ screencolor = parameters.background_color
// txcolor = parameters.foreground_color
/ txbgcolor = parameters.background_color
</defaults>

<expressions>
// Define durations using durations set in <parameters>
/ timeout = parameters.fixation_duration + parameters.time_limit // Maximum response time (stimulus onset + 2000)
// Define event onset times using durations set in <parameters>
/ fixation_onset = 0
/ shape_onset = parameters.fixation_duration
/ blank_onset = parameters.fixation_duration + parameters.shape_duration
/ mask_onset = parameters.fixation_duration + parameters.shape_duration + parameters.blank_duration
/ iti_onset = parameters.fixation_duration + parameters.shape_duration + parameters.blank_duration + parameters.mask_duration

/// Define fixation cue (zoom from big fixation cross)
// fontsize_fixation_big = (parameters.fontsize_fixation * 6)
// fixation_duration_big = (parameters.fixation_duration / 6)
// fixation_onset_big = 0
// fixation_onset_normal = expressions.fixation_duration_big
</expressions>


**************************************************************************************************************
	Initialize values
**************************************************************************************************************
<values>
/ trial_counter = 0 // used in trials to control stimulus selection
/ stim_index = 0 // used in trials to control stimulus selection
/ target_present = "" // used in trials to track whether target is present
/ stimulus = "" // used in trials to record which stimulus was presented
/ stimulus_left = "" // used in trials to record which stimulus was presented
/ stimulus_right = "" // used in trials to record which stimulus was presented
/ time_elapsed_ms = 0 // used to record experiment duration
/ timestamp = 0 // used to record time of events
</values>


**************************************************************************************************************
	Stimuli
**************************************************************************************************************
//// Load stimuli specified in load_stimuli.iqx:
// stim_practice_left; stim_practice_right;
// stim_main_left; stim_main_right
//  Practice:
//    12 target-present
//    4  target-absent
//  Main:
//    32 target-present
// 	  8  target-absent
<include>
/ file = "script_load_stimuli.iqx"
/ file = "script_load_surveys.iqx"
/ file = "script_load_interactive_instructions.iqx"
</include>

// Define stimulus selection pools
<list stim_selector_practice>
// Note: controls the selection of the 16 stimuli for the practice condition
// (item list contain the possible itemnumbers)
// The first 12 are target-present; the last 4 are target-absent.
/ items = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
/ poolsize = 16
/ replace = false
/ resetinterval = 0 // Reset after all items have been selected -- number of items needs to match number presented per block
</list>

<list stim_selector_main>
// Note: controls the selection of the 16 stimuli for the practice condition
// (item list contain the possible itemnumbers)
// The first 32 are target-present; the last 8 are target-absent.
/ items = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)
/ poolsize = 40
/ replace = false
/ resetinterval = 0 // Reset after all items have been selected -- number of items needs to match number presented per block
</list>

**************************************************************************************************************
	Instructions and prompts
**************************************************************************************************************
// Define instructions and prompts
//	  General 


//	  response-specific instructions ("/")
//	  response-specific instructions ("z")
//	  feedback for correct/incorrect practice trials
<instruct>
/ navigationbuttonfontstyle = (parameters.fontfamily_default, parameters.nav_button_fontsize_default)
/ nextkey = (" ")
/ prevkey = (noresponse) // 14=Backspace
/ finishlabel = "Press SPACE to continue"
/ nextlabel = "Press SPACE to continue"
// prevlabel = "Press BACKSPACE to go back"
</instruct>

<text incorrect_message>
/ items = ("      INCORRECT      ")
/ txcolor = (255, 0, 0)
</text>

<text correct_message>
/ items = ("     CORRECT     ")
/ txcolor = (0, 255, 0)
</text>

**************************************************************************************************************

// Define placeholder blocks, for testing
<htmlpage placeholder_consent>
/ file = "placeholder_consent.html"
</htmlpage>
<block placeholder_consent>
/ preinstructions = (placeholder_consent)
</block>

<htmlpage placeholder_demographics>
/ file = "placeholder_demographics.html"
</htmlpage>
<block placeholder_demographics>
/ preinstructions = (placeholder_demographics)
</block>

<htmlpage placeholder_ehi_taskexperience_feedback>
/ file = "placeholder_ehi_taskexperience_feedback.html"
</htmlpage>
<block placeholder_ehi_taskexperience_feedback>
/ preinstructions = (placeholder_ehi_taskexperience_feedback)
</block>

<htmlpage placeholder_practice_slash>
/ file = "placeholder_practice_SLASH.html"
</htmlpage>
<block placeholder_practice_slash>
/ preinstructions = (placeholder_practice_slash)
</block>

<htmlpage placeholder_practice_z>
/ file = "placeholder_practice_ZEE.html"
</htmlpage>
<block placeholder_practice_z>
/ preinstructions = (placeholder_practice_z)
</block>

<htmlpage placeholder_main_slash>
/ file = "placeholder_main_SLASH.html"
</htmlpage>
<block placeholder_main_slash>
/ preinstructions = (placeholder_main_slash)
</block>

<htmlpage placeholder_main_z>
/ file = "placeholder_main_ZEE.html"
</htmlpage>
<block placeholder_main_z>
/ preinstructions = (placeholder_main_z)
</block>


**************************************************************************************************************
	Instructions 1-10 defined as Trials (to present images without css glitches: https://forums.millisecond.com/Topic1838.aspx)
**************************************************************************************************************

// At the beginning, before demographics: 1-2
<text inst_1_welcome>
/ items = ("Welcome!

This program will take over your screen for the duration of the experiment. If you need to quit the program without completing the experiment, you can press 'CTRL-Q' to permanently end the program. If you have to quit the experiment early, please return this submission on Prolific by selecting the 'stop without completing' option.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default, false, false, false, false, 5, 1)
/ position = (2%, 10%)
/ halign = left
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_1_welcome>
/ ontrialbegin = [
trial.inst_1_welcome.insertstimulustime(text.inst_1_welcome, 0);
trial.inst_1_welcome.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_2_demographics>
/ items = ("Thanks for signing up! We rely on participants like you to do fundamental research on how the mind works. Just a few minutes of your time will help advance science.

First, please answer a few questions about yourself.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default, false, false, false, false, 5, 1)
/ position = (2%, 10%)
/ halign = left
/ valign = top
/ hjustify = left 
/ size = (96%, 20%)
</text>

<trial inst_2_demographics>
/ ontrialbegin = [
trial.inst_2_demographics.insertstimulustime(text.inst_2_demographics, 0);
trial.inst_2_demographics.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>


**************************************************************************************************************
	Define quick preview stimuli & instruction (trial)
**************************************************************************************************************

<parameters>
/ inst_qp_width = parameters.stim_size // Stimulus width, in % screen size
/ inst_qp_xpos_left = parameters.stim_xposition_left
/ inst_qp_xpos_right = parameters.stim_xposition_right
/ inst_qp_ypos = parameters.stim_yposition
</parameters>
<item qp_shape_left>
/ 1 = "stimuli_target_trianglesquares.svg"
</item>

<item qp_shape_right>
/ 1 = "stimuli_distractor_diamondtriangles.svg"
</item>

<picture qp_shape_left>
/ items = qp_shape_left
/ position = (parameters.inst_qp_xpos_left, parameters.inst_qp_ypos)
/ size = (parameters.inst_qp_width, null)
</picture>

<picture qp_shape_right>
/ items = qp_shape_right
/ position = (parameters.inst_qp_xpos_right, parameters.inst_qp_ypos)
/ size = (parameters.inst_qp_width, null)
</picture>

<text qp_fixation>
/ items = ("+")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_fixation, false, false, false, false, 5, 1)
/ position = (50%, 50%)
</text>

<text qp_instruction>
/ items = ("In this experiment, you will see big shapes made of little shapes, presented like this:")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default, false, false, false, false, 5, 1)
/ position = (2%, 2%)
/ halign = left
/ valign = top
/ size = (96%, 20%)
</text>

<trial inst_3_quickpreview>
/ ontrialbegin = [
trial.inst_3_quickpreview.insertstimulustime(picture.qp_shape_left, 0);
trial.inst_3_quickpreview.insertstimulustime(text.qp_fixation, 0);
trial.inst_3_quickpreview.insertstimulustime(picture.qp_shape_right, 0);
trial.inst_3_quickpreview.insertstimulustime(text.qp_instruction, 0);
trial.inst_3_quickpreview.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

**************************************************************************************************************
	Define example stimuli & instructions (trials)
**************************************************************************************************************
<parameters>
/ inst_example_width = 28% // Stimulus width, in % screen size
/ inst_example_xpos_left = 18%
/ inst_example_xpos_center = 50%
/ inst_example_xpos_right = 82%
/ inst_example_ypos = 5%
</parameters>
<item example_0_blank>
/ 1 = "resources_example_0_blank.svg"
</item>

<item example_1_fixation>
/ 1 = "resources_example_1_fixation.svg"
</item>

<item example_2a_shapes_present1>
/ 1 = "resources_example_2a_shapes_present1.svg"
</item>

<item example_2b_shapes_present1_highlight>
/ 1 = "resources_example_2b_shapes_present1_highlight.svg"
</item>

<item example_2c_shapes_present2_highlight>
/ 1 = "resources_example_2c_shapes_present2_highlight.svg"
</item>

<item example_2d_shapes_absent_highlight>
/ 1 = "resources_example_2d_shapes_absent_highlight.svg"
</item>

<item example_resources_example_3_mask>
/ 1 = "resources_example_3_mask.svg"
</item>

<text press_space_to_continue>
/ items = ("[Press SPACE to continue]")
/ fontstyle = (parameters.fontfamily_default, parameters.nav_button_fontsize_default, false, false, false, false, 5, 1)
/ position = (50%, 95%)
</text>

<picture example_fixation_left>
/ items = example_1_fixation
/ position = (parameters.inst_example_xpos_left, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null) // TODO: make height explicit
/ valign = top
</picture>

<picture example_blank_center>
/ items = example_0_blank
/ position = (parameters.inst_example_xpos_center, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>

<picture example_2a_shapes_present1>
/ items = example_2a_shapes_present1
/ position = (parameters.inst_example_xpos_center, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>

<picture example_2b_shapes_present1_highlight>
/ items = example_2b_shapes_present1_highlight
/ position = (parameters.inst_example_xpos_center, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>

<picture example_2c_shapes_present2_highlight>
/ items = example_2c_shapes_present2_highlight
/ position = (parameters.inst_example_xpos_center, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>

<picture example_2d_shapes_absent_highlight>
/ items = example_2d_shapes_absent_highlight
/ position = (parameters.inst_example_xpos_center, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>

<picture example_blank_right>
/ items = example_0_blank
/ position = (parameters.inst_example_xpos_right, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>

<picture example_mask_right>
/ items = example_resources_example_3_mask
/ position = (parameters.inst_example_xpos_right, parameters.inst_example_ypos)
/ size = (parameters.inst_example_width, null)
/ valign = top
</picture>
	  
	  
<text inst_4_intro_fixation>
/ items = ("Before each set of shapes, you will see a cross in the center of the screen. Be sure to focus your eyes on the cross.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_4_intro_fixation>
/ ontrialbegin = [
trial.inst_4_intro_fixation.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_4_intro_fixation.insertstimulustime(picture.example_blank_center, 0);
trial.inst_4_intro_fixation.insertstimulustime(picture.example_blank_right, 0);
trial.inst_4_intro_fixation.insertstimulustime(text.inst_4_intro_fixation, 0);
trial.inst_4_intro_fixation.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_5_SLASH_intro_shapes>
/ items = ("When the shapes appear, your job will be to press the '/' (SLASH) key with your RIGHT INDEX FINGER, as quickly as possible, if you see either a circle or a square. The circles and squares could be either in the little shapes or the big shapes. 
If you don't see any circles or squares on the screen, don't press anything.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<text inst_5_ZEE_intro_shapes>
/ items = ("When the shapes appear, your job will be to press the 'Z' key with your LEFT INDEX FINGER, as quickly as possible, if you see either a circle or a square. The circles and squares could be either in the little shapes or the big shapes. 
If you don't see any circles or squares on the screen, don't press anything.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_5_SLASH_intro_shapes>
/ ontrialbegin = [
trial.inst_5_SLASH_intro_shapes.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_5_SLASH_intro_shapes.insertstimulustime(picture.example_2a_shapes_present1, 0);
trial.inst_5_SLASH_intro_shapes.insertstimulustime(picture.example_blank_right, 0);
trial.inst_5_SLASH_intro_shapes.insertstimulustime(text.inst_5_SLASH_intro_shapes, 0);
trial.inst_5_SLASH_intro_shapes.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial inst_5_ZEE_intro_shapes>
/ ontrialbegin = [
trial.inst_5_ZEE_intro_shapes.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_5_ZEE_intro_shapes.insertstimulustime(picture.example_2a_shapes_present1, 0);
trial.inst_5_ZEE_intro_shapes.insertstimulustime(picture.example_blank_right, 0);
trial.inst_5_ZEE_intro_shapes.insertstimulustime(text.inst_5_ZEE_intro_shapes, 0);
trial.inst_5_ZEE_intro_shapes.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_6_intro_mask>
/ items = ("After you see the shapes, they will be replaced by rectangles made out of hashtags—you can ignore these rectangles.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_6_intro_mask>
/ ontrialbegin = [
trial.inst_6_intro_mask.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_6_intro_mask.insertstimulustime(picture.example_2a_shapes_present1, 0);
trial.inst_6_intro_mask.insertstimulustime(picture.example_mask_right, 0);
trial.inst_6_intro_mask.insertstimulustime(text.inst_6_intro_mask, 0);
trial.inst_6_intro_mask.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_7_SLASH_intro_present1>
/ items = ("For example, if you see these shapes, you should press the '/' (SLASH) key, because there is a square (in the little shapes).")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<text inst_7_ZEE_intro_present1>
/ items = ("For example, if you see these shapes, you should press the 'Z' key, because there is a square (in the little shapes).")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_7_SLASH_intro_present1>
/ ontrialbegin = [
trial.inst_7_SLASH_intro_present1.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_7_SLASH_intro_present1.insertstimulustime(picture.example_2b_shapes_present1_highlight, 0);
trial.inst_7_SLASH_intro_present1.insertstimulustime(picture.example_mask_right, 0);
trial.inst_7_SLASH_intro_present1.insertstimulustime(text.inst_7_SLASH_intro_present1, 0);
trial.inst_7_SLASH_intro_present1.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial inst_7_ZEE_intro_present1>
/ ontrialbegin = [
trial.inst_7_ZEE_intro_present1.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_7_ZEE_intro_present1.insertstimulustime(picture.example_2b_shapes_present1_highlight, 0);
trial.inst_7_ZEE_intro_present1.insertstimulustime(picture.example_mask_right, 0);
trial.inst_7_ZEE_intro_present1.insertstimulustime(text.inst_7_ZEE_intro_present1, 0);
trial.inst_7_ZEE_intro_present1.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_8_SLASH_intro_present2>
/ items = ("If you see these shapes, you should press the '/' (SLASH) key, because there is a circle (in the big shapes).")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<text inst_8_ZEE_intro_present2>
/ items = ("If you see these shapes, you should press the 'Z' key, because there is a circle (in the big shapes).")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_8_SLASH_intro_present2>
/ ontrialbegin = [
trial.inst_8_SLASH_intro_present2.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_8_SLASH_intro_present2.insertstimulustime(picture.example_2c_shapes_present2_highlight, 0);
trial.inst_8_SLASH_intro_present2.insertstimulustime(picture.example_mask_right, 0);
trial.inst_8_SLASH_intro_present2.insertstimulustime(text.inst_8_SLASH_intro_present2, 0);
trial.inst_8_SLASH_intro_present2.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial inst_8_ZEE_intro_present2>
/ ontrialbegin = [
trial.inst_8_ZEE_intro_present2.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_8_ZEE_intro_present2.insertstimulustime(picture.example_2c_shapes_present2_highlight, 0);
trial.inst_8_ZEE_intro_present2.insertstimulustime(picture.example_mask_right, 0);
trial.inst_8_ZEE_intro_present2.insertstimulustime(text.inst_8_ZEE_intro_present2, 0);
trial.inst_8_ZEE_intro_present2.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_9_absent>
/ items = ("If you see these shapes on the screen, you should NOT press any key, because there is no circle or square.")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 45%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<trial inst_9_absent>
/ ontrialbegin = [
trial.inst_9_absent.insertstimulustime(picture.example_fixation_left, 0);
trial.inst_9_absent.insertstimulustime(picture.example_2d_shapes_absent_highlight, 0);
trial.inst_9_absent.insertstimulustime(picture.example_mask_right, 0);
trial.inst_9_absent.insertstimulustime(text.inst_9_absent, 0);
trial.inst_9_absent.insertstimulustime(text.press_space_to_continue, 0);
]
/ validresponse = (" ")
/ recorddata = false
</trial>

<text inst_10_SLASH_practice1>
/ items = ("Let's get started! Remember, press the '/' (SLASH) key with your RIGHT INDEX FINGER whenever you see either a circle or a square. Please keep your eyes focused on the center of the screen.

Press the spacebar to begin a practice run. We'll let you know whether you've responded correctly. Be sure to respond as quickly as possible—if you take longer than 2 seconds to respond to a circle or a square, your response will be counted as incorrect (too slow).")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 8%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>

<text inst_10_ZEE_practice1>
/ items = ("Let's get started! Remember, press the 'Z' key with your LEFT INDEX FINGER whenever you see either a circle or a square. Please keep your eyes focused on the center of the screen.

Press the spacebar to begin a practice run. We'll let you know whether you've responded correctly. Be sure to respond as quickly as possible—if you take longer than 2 seconds to respond to a circle or a square, your response will be counted as incorrect (too slow).")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default_small, false, false, false, false, 5, 1)
/ position = (50%, 8%)
/ halign = center
/ valign = top
/ hjustify = left 
/ size = (92%, 20%)
</text>


**************************************************************************************************************
	Instructions 11-15 (html pages)
**************************************************************************************************************
<htmlpage inst_10_SLASH_practice1>
/ file = "inst_10_SLASH_practice1.html"
</htmlpage>

<htmlpage inst_10_ZEE_practice1>
/ file = "inst_10_ZEE_practice1.html"
</htmlpage>

// After practice1, before main1: 11
<htmlpage inst_11_SLASH_main1>
/ file = "inst_11_SLASH_main1.html"
</htmlpage>

<htmlpage inst_11_ZEE_main1>
/ file = "inst_11_ZEE_main1.html"
</htmlpage>

// After main1, before practice 2: interblock break, 12 // No longer used -- put break instructions in "practice2" instead (Oct 21)
<page interblock_break>
^^Nice job! You are halfway done—feel free to take a break. Press the spacebar when you are ready to continue.
</page>

<htmlpage inst_12_SLASH_practice2>
/ file = "inst_12_SLASH_practice2.html"
</htmlpage>

<htmlpage inst_12_ZEE_practice2>
/ file = "inst_12_ZEE_practice2.html"
</htmlpage>

// After practice 2, before main 2: 13
<htmlpage inst_13_SLASH_main2>
/ file = "inst_13_SLASH_main2.html"
</htmlpage>

<htmlpage inst_13_ZEE_main2>
/ file = "inst_13_ZEE_main2.html"
</htmlpage>

// After main 2, before end questions: 14
<htmlpage inst_14_end_questions>
/ file = "inst_14_end_questions.html"
</htmlpage>

// At the very end: 15
<htmlpage inst_15_goodbye>
/ file = "inst_15_goodbye.html"
</htmlpage>

**************************************************************************************************************
	Define instruction blocks
**************************************************************************************************************
<block inst_1_2_UNIVERSAL>
/ trials = [
	1 = inst_1_welcome;
	2 = inst_2_demographics;
]
</block>

<block inst_3_9_SLASH>
/ trials = [
	1 = inst_3_quickpreview;
	2 = inst_4_intro_fixation;
	3 = inst_5_SLASH_intro_shapes;
	4 = inst_6_intro_mask;
	5 = inst_7_SLASH_intro_present1;
	6 = inst_8_SLASH_intro_present2;
	7 = inst_9_absent;
	]
</block>

<block inst_3_9_ZEE>
/ trials = [
	1 = inst_3_quickpreview;
	2 = inst_4_intro_fixation;
	3 = inst_5_ZEE_intro_shapes;
	4 = inst_6_intro_mask;
	5 = inst_7_ZEE_intro_present1;
	6 = inst_8_ZEE_intro_present2;
	7 = inst_9_absent;
	]
</block>

<block inst_11_SLASH_main1>
/ preinstructions = (inst_11_SLASH_main1)
</block>

<block inst_11_ZEE_main1>
/ preinstructions = (inst_11_ZEE_main1)
</block>

<block interblock_break>
/ preinstructions = (interblock_break)
</block>

<block inst_12_SLASH_practice2>
/ preinstructions = (inst_12_SLASH_practice2)
</block>

<block inst_12_ZEE_practice2>
/ preinstructions = (inst_12_ZEE_practice2)
</block>

<block inst_13_SLASH_main2>
/ preinstructions = (inst_13_SLASH_main2)
</block>

<block inst_13_ZEE_main2>
/ preinstructions = (inst_13_ZEE_main2)
</block>

<block inst_14_end_questions>
/ preinstructions = (inst_14_end_questions)
</block>

<block inst_15_goodbye>
/ preinstructions = (inst_15_goodbye)
</block>



**************************************************************************************************************
	Experiment Trials
**************************************************************************************************************
// Define trial types (what stim are presented? Which responses are valid/correct?)
//	  instructions (keys for next, previous)
//    practice  ("/") 12 target-present, 4 target-absent [16 trials total]
//	  main      ("/") 32 target-present, 8 target-absent [40 trials total]
//    practice  ("z") 12 target-present, 4 target-absent [16 trials total]
//	  main      ("z") 32 target-present, 8 target-absent [40 trials total]
TEST_inst_with_pics;

<trial practice_slash>
/ ontrialbegin = [
	values.trial_counter += 1; // is this used?
	values.stim_index = list.stim_selector_practice.nextvalue;
	if (values.stim_index <= 12){ // Trials 1-12: present
		values.target_present = "yes";
	} else if (values.stim_index > 12) { //Trials 13-16: absent
		values.target_present = "no";
	} else {
		values.target_present = "error: stimulus index out of bounds";
	};
	
	//trial.practice_slash.insertstimulustime(clearscreen, expressions.fixation_onset_normal); // 600ms/n (after cue): Refresh screen
	//trial.practice_slash.insertstimulustime(text.stim_fixation, expressions.fixation_onset_normal); // 600ms/n (after cue): Show normal fixation cross after cue

	//trial.practice_slash.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.practice_slash.insertstimulustime(picture.stim_practice_left, expressions.shape_onset); // 600ms: show stimulus
	trial.practice_slash.insertstimulustime(picture.stim_practice_right, expressions.shape_onset); // 600ms: show stimulus
	//trial.practice_slash.insertstimulustime(text.response_reminder_SLASH, expressions.shape_onset); // 600ms: show stimulus

	
	trial.practice_slash.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	//trial.practice_slash.insertstimulustime(text.response_reminder_SLASH, expressions.blank_onset); // 600+134ms: show blank

	
	trial.practice_slash.insertstimulustime(picture.stim_mask_left, expressions.mask_onset); // 600+134ms+256ms: show mask
	trial.practice_slash.insertstimulustime(picture.stim_mask_right, expressions.mask_onset); // 600+134ms+256ms: show mask
	//trial.practice_slash.insertstimulustime(text.response_reminder_SLASH, expressions.mask_onset); // 600+134ms+256ms: show mask

    trial.practice_slash.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
	//trial.practice_slash.insertstimulustime(text.response_reminder_SLASH, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

// stimulustimes = [0 = stim_fixation_big]
/ stimulustimes = [0 = stim_fixation]

/ beginresponsetime = parameters.fixation_duration
/ responseinterrupt = immediate
/ timeout = expressions.timeout

/ validresponse = ("/", noresponse)
/ iscorrectresponse = [(values.stim_index <= 12 && trial.practice_slash.responsetext == "/") || (values.stim_index > 12 && trial.practice_slash.responsetext != "/")] 

/ ontrialend = [
	trial.practice_slash.resetstimulusframes();
	values.stimulus_left = picture.stim_practice_left.currentitem;
	values.stimulus_right = picture.stim_practice_right.currentitem;
	values.time_elapsed_ms = script.elapsedtime;
	values.timestamp = script.currenttime;
]

/ posttrialpause = parameters.iti
/ recorddata = true

/ errormessage = (incorrect_message, parameters.feedback_duration)
/ correctmessage = (correct_message, parameters.feedback_duration)

</trial>

<trial practice_z>
/ ontrialbegin = [
	values.trial_counter += 1; // is this used?
	values.stim_index = list.stim_selector_practice.nextvalue;
	if (values.stim_index <= 12){ // Trials 1-12: present
		values.target_present = "yes";
	} else if (values.stim_index > 12) { //Trials 13-16: absent
		values.target_present = "no";
	} else {
		values.target_present = "error: stimulus index out of bounds";
	};
	
	//trial.practice_z.insertstimulustime(clearscreen, expressions.fixation_onset_normal); // 600ms/n (after cue): Refresh screen
	//trial.practice_z.insertstimulustime(text.stim_fixation, expressions.fixation_onset_normal); // 600ms/n (after cue): Show normal fixation cross after cue

	//trial.practice_z.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.practice_z.insertstimulustime(picture.stim_practice_left, expressions.shape_onset); // 600ms: show stimulus
	trial.practice_z.insertstimulustime(picture.stim_practice_right, expressions.shape_onset); // 600ms: show stimulus

	
	trial.practice_z.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.practice_z.insertstimulustime(picture.stim_mask_left, expressions.mask_onset); // 600+134ms+256ms: show mask
	trial.practice_z.insertstimulustime(picture.stim_mask_right, expressions.mask_onset); // 600+134ms+256ms: show mask

    trial.practice_z.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

// stimulustimes = [0 = stim_fixation_big]
/ stimulustimes = [0 = stim_fixation]

/ beginresponsetime = parameters.fixation_duration
/ responseinterrupt = immediate
/ timeout = expressions.timeout

/ validresponse = ("z", noresponse)
/ iscorrectresponse = [(values.stim_index <= 12 && trial.practice_z.responsetext == "z") || (values.stim_index > 12 && trial.practice_z.responsetext != "z")] 
// Hack: set correct response for absent trials to responsetext != "z"

/ ontrialend = [
	trial.practice_z.resetstimulusframes();
	values.stimulus_left = picture.stim_practice_left.currentitem;
	values.stimulus_right = picture.stim_practice_right.currentitem;
	values.time_elapsed_ms = script.elapsedtime;
	values.timestamp = script.currenttime;
]

/ posttrialpause = parameters.iti
/ recorddata = true

/ errormessage = (incorrect_message, parameters.feedback_duration)
/ correctmessage = (correct_message, parameters.feedback_duration)

</trial>

<trial main_slash>
/ ontrialbegin = [
	values.trial_counter += 1;
	values.stim_index = list.stim_selector_main.nextvalue;
	if (values.stim_index <= 32){ // Trials 1-32: present
		values.target_present = "yes";
	} else if (values.stim_index > 32) { //Trials 33-40: absent
		values.target_present = "no";
	} else {
		values.target_present = "error: stimulus index out of bounds";
	};
	
	//trial.main_slash.insertstimulustime(clearscreen, expressions.fixation_onset_normal); // 600ms/n (after cue): Refresh screen
	//trial.main_slash.insertstimulustime(text.stim_fixation, expressions.fixation_onset_normal); // 600ms/n (after cue): Show normal fixation cross after cue
	
	//trial.main_slash.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.main_slash.insertstimulustime(picture.stim_main_left, expressions.shape_onset); // 600ms: show stimulus
	trial.main_slash.insertstimulustime(picture.stim_main_right, expressions.shape_onset); // 600ms: show stimulus
	
	trial.main_slash.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.main_slash.insertstimulustime(picture.stim_mask_left, expressions.mask_onset); // 600+134ms+256ms: show mask
	trial.main_slash.insertstimulustime(picture.stim_mask_right, expressions.mask_onset); // 600+134ms+256ms: show mask

    trial.main_slash.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

// stimulustimes = [0 = stim_fixation_big]
/ stimulustimes = [0 = stim_fixation]

/ beginresponsetime = parameters.fixation_duration
/ responseinterrupt = immediate
/ timeout = expressions.timeout

/ validresponse = ("/", noresponse)
/ iscorrectresponse = [(values.stim_index <= 32 && trial.main_slash.responsetext == "/") || (values.stim_index > 32 && trial.main_slash.responsetext != "/")] 
// Hack: set correct response for absent trials to responsetext != "/"
/ ontrialend = [
	trial.main_slash.resetstimulusframes();
	values.stimulus_left = picture.stim_main_left.currentitem;
	values.stimulus_right = picture.stim_main_right.currentitem;
	values.time_elapsed_ms = script.elapsedtime;
	values.timestamp = script.currenttime;
]

/ posttrialpause = parameters.iti
/ recorddata = true
</trial>

<trial main_z>
/ ontrialbegin = [
	values.trial_counter += 1;
	values.stim_index = list.stim_selector_main.nextvalue;
	if (values.stim_index <= 32){ // Trials 1-32: present
		values.target_present = "yes";
	} else if (values.stim_index > 32) { //Trials 33-40: absent
		values.target_present = "no";
	} else {
		values.target_present = "error: stimulus index out of bounds";
	};
	
	//trial.main_z.insertstimulustime(clearscreen, expressions.fixation_onset_normal); // 600ms/n (after cue): Refresh screen
	//trial.main_z.insertstimulustime(text.stim_fixation, expressions.fixation_onset_normal); // 600ms/n (after cue): Show normal fixation cross after cue
	
	//trial.main_z.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.main_z.insertstimulustime(picture.stim_main_left, expressions.shape_onset); // 600ms: show stimulus
	trial.main_z.insertstimulustime(picture.stim_main_right, expressions.shape_onset); // 600ms: show stimulus
	
	trial.main_z.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.main_z.insertstimulustime(picture.stim_mask_left, expressions.mask_onset); // 600+134ms+256ms: show mask
	trial.main_z.insertstimulustime(picture.stim_mask_right, expressions.mask_onset); // 600+134ms+256ms: show mask

    trial.main_z.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

// stimulustimes = [0 = stim_fixation_big]
/ stimulustimes = [0 = stim_fixation]

/ beginresponsetime = parameters.fixation_duration
/ responseinterrupt = immediate
/ timeout = expressions.timeout

/ validresponse = ("z", noresponse)
/ iscorrectresponse = [(values.stim_index <= 32 && trial.main_z.responsetext == "z") || (values.stim_index > 32 && trial.main_z.responsetext != "z")] 

/ ontrialend = [
	trial.main_z.resetstimulusframes();
	values.stimulus_left = picture.stim_main_left.currentitem;
	values.stimulus_right = picture.stim_main_right.currentitem;
	values.time_elapsed_ms = script.elapsedtime;
	values.timestamp = script.currenttime;
]
</trial>

<trial advance_on_keypress_SLASH>
/ stimulustimes = [0=press_space_to_continue_central, response_reminder_SLASH]
/ validresponse = (" ")
</trial>

<trial advance_on_keypress_ZEE>
/ stimulustimes = [0=press_space_to_continue_central, response_reminder_ZEE]
/ validresponse = (" ")
</trial>

**************************************************************************************************************
	Blocks
**************************************************************************************************************
// Define blocks
//    practice block ("/") 12 target-present, 4 target-absent          [16 trials total]
//	  main block     ("/") 32 target-present, 8 target-absent, times 2 [80 trials total]
//    practice block ("z") 12 target-present, 4 target-absent          [16 trials total]
//	  main block     ("z") 32 target-present, 8 target-absent, times 2 [80 trials total]
<block practice_slash>
/ trials = [
	// How to present 12 present, 4 absent?
	// (a) Select without replacement on list of 12 present; list of 4 absent (does this work?)
	// 1-16 = noreplace(practice_present_slash, practice_absent_slash) // Make sure this randomly selects from full pool; if not, move logic.
	// (b) Predefine set of 16 stim, in one trial type. Randomly present those 16.
    // It might be harder to handle responses in (b). So, we will use (a).
	//1-16 = noreplace(practice_slash)
	// To let participant advance trials, interleave "advance with spacebar"trials. You have to specify each trial number manually.
	// https://www.millisecond.com/support/docs/current/html/language/attributes/trials.htm
	1, 3, 5, 7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 = noreplace(practice_slash);
	2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 = advance_on_keypress_SLASH;
	]
/ preinstructions = (inst_10_SLASH_practice1)
</block>

<block practice_z>
/ trials = [
	1, 3, 5, 7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 = noreplace(practice_z);
	2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 = advance_on_keypress_ZEE;
	]
/ preinstructions = (inst_10_ZEE_practice1)
</block>

<block main_slash>
/ trials = [
	// How to present 32 present, 8 absent?
	// (a) Select without replacement on list of 32 present; list of 8 absent (does this work?)
	// 1-40 = noreplace(main_present_slash, main_absent_slash);
	// 41-80 = noreplace(main_present_slash, main_absent_slash) 
	// (b) Predefine set of 40 stim, in one trial type. Randomly present those 40.
	// It might be harder to handle responses in (b).
	// 1-40 = noreplace(main_slash);
	//41-80 = noreplace(main_slash);
	1, 3, 5, 7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79 = noreplace(main_slash);
	2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80 = advance_on_keypress_SLASH;
	81, 83, 85, 87, 89, 91, 93, 95, 97,  99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159 = noreplace(main_slash);
	82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160 = advance_on_keypress_SLASH;
	]
</block>

<block main_z>
/ trials = [
	1, 3, 5, 7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79 = noreplace(main_z);
	2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80 = advance_on_keypress_ZEE;
	81, 83, 85, 87, 89, 91, 93, 95, 97,  99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159 = noreplace(main_z);
	82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160 = advance_on_keypress_ZEE;
	]
</block>


**************************************************************************************************************
	Blocks
**************************************************************************************************************
// Define experiment
// Order:
//	  Demographics
//	  General instructions
//	  response-specific instructions ("/")
//    practice block ("/") (12 t-p, 4 t-a)
//	  main block ("/") (32 t-p, 8 t-a, times 2) 
//	  response-specific instructions ("z")
//    practice block ("z") (12 t-p, 4 t-a)
//	  main block ("z") (32 t-p, 8 t-a, times 2)
//	  Handedness questionnaire; open-ended feedback form
// For 1/2 subjects, do "z" blocks first.
<expt>
/ subjects = (1 of 2) // Subjects who will respond with "/" first
// To automatically assign subject ID and group by odd/even, host on inquisit website.
// https://www.millisecond.com/support/docs/current/html/articles/websubjectnumbers.htm
/ groupassignment = groupnumber
/ blocks = [
	1=inst_1_2_UNIVERSAL;
	2=demographics;
	3=inst_3_9_SLASH;
	4=interactive_instructions_slash;
	5=practice_slash;
	6=inst_11_SLASH_main1;
	7=main_slash;
	8=inst_12_SLASH_practice2;
	9=practice_z;
	10=inst_13_SLASH_main2;
	11=main_z;
	12=inst_14_end_questions;
	13=ehi_short;
	14=end_questions;
	15=inst_15_goodbye;
	]
</expt>

<expt>
/ subjects = (2 of 2) // Subjects who will respond with "z" first
/ groupassignment = groupnumber
/ blocks = [
	1=inst_1_2_UNIVERSAL;
	2=demographics;
	3=inst_3_9_ZEE;
	4=interactive_instructions_z;
	5=practice_z;
	6=inst_11_ZEE_main1;
	7=main_z;
	8=inst_12_ZEE_practice2;
	9=practice_slash;
	10=inst_13_ZEE_main2;
	11=main_slash;
	12=inst_14_end_questions;
	13=ehi_short;
	14=end_questions;
	15=inst_15_goodbye;
	]
</expt>


